apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-hive
  labels:
    app: hive
spec:
  replicas: {{ .Values.hive.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: hive
  template:
    metadata:
      labels:
        app: hive
    spec:
      securityContext:
        runAsUser: 0
        fsGroup: 0
      containers:
      - name: hive-metastore
        image: custom-hive:0.0.1
        imagePullPolicy: {{ .Values.hive.image.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Creating home directory for hive user..."
          mkdir -p /home/hive
          echo "Checking file permissions..."
          ls -ld /tmp /home/hive /etc/hive/conf /opt/hive /opt/hive/extra-lib
          echo "Checking hive-site.xml..."
          cat /etc/hive/conf/hive-site.xml
          echo "Checking PostgreSQL driver..."
          ls -l /opt/hive/extra-lib/postgresql-42.7.4.jar
          echo "Checking HikariCP JAR..."
          ls -l /opt/hive/extra-lib/HikariCP-5.0.1.jar
          echo "Checking Thrift JAR..."
          ls -l /opt/hive/lib/libthrift-0.14.1.jar
          echo "Checking PostgreSQL connection..."
          psql -h data-lake-postgres -U hive -d hive_metastore -c "SELECT 1" 2>&1 | tee /tmp/pg-check.log
          echo "Checking HADOOP_CLASSPATH..."
          export HADOOP_CLASSPATH=/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar
          echo "HADOOP_CLASSPATH: $HADOOP_CLASSPATH"
          echo "Checking HIVE_AUX_JARS_PATH..."
          export HIVE_AUX_JARS_PATH=/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/lib/libthrift-0.14.1.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar
          echo "HIVE_AUX_JARS_PATH: $HIVE_AUX_JARS_PATH"
          echo "Testing Thrift port before starting Metastore..."
          netstat -tuln | grep 9083 || echo "Port 9083 not found before starting Metastore"
          echo "Starting Hive Metastore Server..."
          export HIVE_LOGLEVEL=DEBUG
          export HADOOP_CLIENT_OPTS="-Dhive.log.file=hive-metastore.log -Dhive.log.dir=/tmp -Dhive.pid.dir=/tmp"
          /opt/hive/bin/hive --skiphadoopversion --skiphbasecp --service metastore 2>&1 | tee /tmp/hive-metastore.log &
          METASTORE_PID=$!
          echo "Metastore PID: $METASTORE_PID"
          echo "Waiting for Metastore to be ready (up to 600s)..."
          timeout 600 bash -c 'until nc -z 127.0.0.1 9083; do echo "Waiting for 127.0.0.1:9083..."; sleep 5; done' || { echo "Timed out waiting for 127.0.0.1:9083"; cat /tmp/hive-metastore.log; ps aux | grep hive; exit 1; }
          echo "Hive Metastore is ready!"
          echo "Testing Thrift port after starting Metastore..."
          netstat -tuln | grep 9083 || { echo "Port 9083 still not found after starting Metastore"; cat /tmp/hive-metastore.log; exit 1; }
          echo "Testing Metastore connection locally..."
          if grep -q "Created RawStore" /tmp/hive-metastore.log; then
            echo "Metastore started successfully (RawStore created)."
          else
            echo "Metastore startup failed (RawStore not found in log)."
            cat /tmp/hive-metastore.log
            exit 1
          fi
          echo "Keeping container alive..."
          tail -f /tmp/hive-metastore.log
        ports:
        - containerPort: {{ .Values.hive.service.metastorePort }}
          name: metastore
        env:
        - name: SERVICE_NAME
          value: "metastore"
        - name: HIVE_CONF_DIR
          value: "/etc/hive/conf"
        - name: HIVE_AUX_JARS_PATH
          value: "/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/lib/libthrift-0.14.1.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar"
        - name: HADOOP_HOME
          value: "/opt/hadoop"
        - name: HADOOP_CLASSPATH
          value: "/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar"
        - name: PGPASSWORD
          value: "hivepassword"
        securityContext:
          runAsUser: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: hive-config
          mountPath: /etc/hive/conf
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "1"
            memory: "4Gi"
      - name: hive-hs2
        image: custom-hive:0.0.1
        imagePullPolicy: {{ .Values.hive.image.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Creating home directory for hive user..."
          mkdir -p /home/hive
          echo "Checking file permissions..."
          ls -ld /tmp /home/hive /etc/hive/conf /opt/hive /opt/hive/extra-lib
          echo "Checking hive-site.xml..."
          cat /etc/hive/conf/hive-site.xml
          echo "Checking PostgreSQL driver..."
          ls -l /opt/hive/extra-lib/postgresql-42.7.4.jar
          echo "Checking HikariCP JAR..."
          ls -l /opt/hive/extra-lib/HikariCP-5.0.1.jar
          echo "Checking Thrift JAR..."
          ls -l /opt/hive/lib/libthrift-0.14.1.jar
          echo "Checking HADOOP_CLASSPATH..."
          export HADOOP_CLASSPATH=/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar
          echo "HADOOP_CLASSPATH: $HADOOP_CLASSPATH"
          echo "Checking HIVE_AUX_JARS_PATH..."
          export HIVE_AUX_JARS_PATH=/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/lib/libthrift-0.14.1.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar
          echo "HIVE_AUX_JARS_PATH: $HIVE_AUX_JARS_PATH"
          echo "Waiting for Metastore to be ready..."
          timeout 600 bash -c 'until nc -z 127.0.0.1 9083; do echo "Waiting for 127.0.0.1:9083..."; sleep 5; done' || { echo "Timed out waiting for 127.0.0.1:9083"; exit 1; }
          echo "Starting HiveServer2..."
          export HIVE_LOGLEVEL=DEBUG
          export HADOOP_CLIENT_OPTS="-Dhive.log.file=hive-hs2.log -Dhive.log.dir=/tmp -Dhive.pid.dir=/tmp"
          /opt/hive/bin/hive --skiphadoopversion --skiphbasecp --service hiveserver2 2>&1 | tee /tmp/hive-hs2.log &
          HS2_PID=$!
          echo "HiveServer2 PID: $HS2_PID"
          echo "Waiting for HiveServer2 to be ready (up to 600s)..."
          timeout 600 bash -c 'until nc -z 127.0.0.1 10000; do echo "Waiting for 127.0.0.1:10000..."; sleep 5; done' || { echo "Timed out waiting for 127.0.0.1:10000"; cat /tmp/hive-hs2.log; ps aux | grep hive; exit 1; }
          echo "HiveServer2 is ready!"
          echo "Testing HS2 port..."
          netstat -tuln | grep 10000 || { echo "Port 10000 not found after starting HiveServer2"; cat /tmp/hive-hs2.log; exit 1; }
          echo "Keeping container alive..."
          tail -f /tmp/hive-hs2.log
        ports:
        - containerPort: 10000
          name: hiveserver2
        env:
        - name: SERVICE_NAME
          value: "hiveserver2"
        - name: HIVE_CONF_DIR
          value: "/etc/hive/conf"
        - name: HIVE_AUX_JARS_PATH
          value: "/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/lib/libthrift-0.14.1.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar"
        - name: HADOOP_HOME
          value: "/opt/hadoop"
        - name: HADOOP_CLASSPATH
          value: "/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar"
        - name: PGPASSWORD
          value: "hivepassword"
        securityContext:
          runAsUser: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: hive-config
          mountPath: /etc/hive/conf
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "1"
            memory: "4Gi"
      initContainers:
      - name: init-postgres
        image: postgres:15
        command: ["/bin/sh", "-c"]
        args:
        - |
          until pg_isready -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER"; do
              echo "Waiting for PostgreSQL..."
              sleep 3
          done
          
          # Kiểm tra và tạo role nếu chưa tồn tại
          psql "postgresql://$PG_USER:$PGPASSWORD@$PG_HOST:$PG_PORT/postgres" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$DB_USER') THEN CREATE ROLE \"$DB_USER\" WITH LOGIN PASSWORD '$DB_PASSWORD' CREATEDB; END IF; END \$\$;" || { echo "Failed to create role $DB_USER"; exit 1; }

          # Kiểm tra và tạo database nếu chưa tồn tại
          psql "postgresql://$PG_USER:$PGPASSWORD@$PG_HOST:$PG_PORT/postgres" -c "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME';" | grep -q 1 || psql "postgresql://$PG_USER:$PGPASSWORD@$PG_HOST:$PG_PORT/postgres" -c "CREATE DATABASE \"$DB_NAME\" OWNER \"$DB_USER\";" || { echo "Failed to create database $DB_NAME"; exit 1; }

          # Gán quyền cho database
          psql "postgresql://$PG_USER:$PGPASSWORD@$PG_HOST:$PG_PORT/postgres" -c "GRANT ALL PRIVILEGES ON DATABASE \"$DB_NAME\" TO \"$DB_USER\";"

          # Gán quyền và ownership cho schema public
          psql "postgresql://$PG_USER:$PGPASSWORD@$PG_HOST:$PG_PORT/$DB_NAME" -c "GRANT ALL ON SCHEMA public TO \"$DB_USER\";"
          psql "postgresql://$PG_USER:$PGPASSWORD@$PG_HOST:$PG_PORT/$DB_NAME" -c "ALTER SCHEMA public OWNER TO \"$DB_USER\";"
        env:
        - name: PG_HOST
          value: "{{ .Values.hive.metastore.db.host }}"
        - name: PG_PORT
          value: "{{ .Values.hive.metastore.db.port }}"
        - name: PG_USER
          value: "airflow"
        - name: PGPASSWORD
          value: "airflow"
        - name: DB_USER
          value: "{{ .Values.hive.metastore.db.user }}"
        - name: DB_PASSWORD
          value: "{{ .Values.hive.metastore.db.password }}"
        - name: DB_NAME
          value: "{{ .Values.hive.metastore.db.name }}"
      - name: init-hive
        image: custom-hive:0.0.1
        imagePullPolicy: {{ .Values.hive.image.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Creating home directory for hive user..."
          mkdir -p /home/hive
          echo "Checking file permissions..."
          ls -ld /tmp /home/hive /etc/hive/conf /opt/hive /opt/hive/extra-lib
          echo "Checking PostgreSQL connection..."
          psql -h data-lake-postgres -U hive -d hive_metastore -c "SELECT 1" 2>&1 | tee /tmp/hive-schema.log
          echo "Initializing Hive schema..."
          export HADOOP_CLASSPATH=/opt/hive/extra-lib/postgresql-42.7.4.jar:/opt/hive/extra-lib/hadoop-aws-3.3.1.jar:/opt/hive/extra-lib/aws-java-sdk-bundle-1.12.262.jar:/opt/hive/extra-lib/HikariCP-5.0.1.jar
          export HIVE_CONF_DIR=/etc/hive/conf
          schematool -dbType postgres -initSchema --verbose 2>&1 | tee -a /tmp/hive-schema.log
          echo "Validating Hive schema..."
          schematool -dbType postgres -validate --verbose 2>&1 | tee -a /tmp/hive-schema.log
          echo "Checking schema log..."
          cat /tmp/hive-schema.log
        env:
        - name: HIVE_CONF_DIR
          value: "/etc/hive/conf"
        - name: PGPASSWORD
          value: "hivepassword"
        securityContext:
          runAsUser: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: hive-config
          mountPath: /etc/hive/conf
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: hive-config
        configMap:
          name: {{ .Release.Name }}-hive-config
      - name: tmp
        emptyDir: {}