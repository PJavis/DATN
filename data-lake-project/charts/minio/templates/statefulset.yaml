apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-minio
  labels:
    app: {{ .Release.Name }}-minio
spec:
  serviceName: {{ .Release.Name }}-minio-headless
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app: {{ .Release.Name }}-minio
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-minio
    spec:
      containers:
      - name: minio
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.apiPort }}
          name: api
        - containerPort: {{ .Values.service.consolePort }}
          name: console
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: accesskey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: secretkey
        volumeMounts:
        - name: minio-data
          mountPath: /data
        command:
        - "minio"
        - "server"
        - "http://{{ .Release.Name }}-minio-{0...{{ sub .Values.replicaCount 1 }}}.{{ .Release.Name }}-minio-headless.{{ .Release.Namespace }}.svc.cluster.local/data"
        - "--console-address"
        - ":{{ .Values.service.consolePort }}"
  volumeClaimTemplates:
  - metadata:
      name: minio-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      {{- if .Values.persistence.storageClass }}
      storageClassName: {{ .Values.persistence.storageClass }}
      {{- end }}